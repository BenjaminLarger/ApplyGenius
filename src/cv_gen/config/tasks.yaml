job_analysis:
  description: >
    Analyze the provided job offer to extract all critical information needed for CV adaptation. 
    If a URL is provided ({job_offer_url}), use the Job Posting Scraper tool to extract the content by passing the URL as input.
    If the URL scraping fails, use the fallback job text provided below:
    {job_offer_fallback}
    
    Parse the job posting to identify location requirements (or determine if remote), exact job title, 
    required technical skills, preferred tools and technologies, experience level, and any specific qualifications mentioned.
    Pay special attention to implicit requirements and prioritize skills based on how frequently they're mentioned or emphasized in the posting.
  expected_output: >
    A structured JSON object containing:
    - job_title: Exact job title from posting
    - target_location: Location to use in CV (job location or "Malaga, Spain" if remote)
    - required_skills: List of technical skills ranked by importance
    - preferred_tools: List of tools/technologies mentioned
    - experience_level: Junior/Mid/Senior level indication
    - key_requirements: Top 5 most critical requirements
    - company_focus: Industry/domain focus areas

skills_matching:
  description: >
    Compare the job requirements from the job analysis with the candidate's predefined skills and projects to create a strategic matching profile.
    Score each skill based on relevance to the job posting, identify the most impactful technical skills to highlight, and determine which tools should be emphasized.
    Analyze all available side projects to identify the 2 most relevant ones that best demonstrate the required competencies (Max 165 characters for the project description).
    Use the candidate's complete skill set and project portfolio for this analysis.
  expected_output: >
    A strategic matching report containing:
    - skill_relevance_scores: Each skill with relevance score (1-10)
    - priority_skills: Top 10 skills to highlight, ranked by importance
    - matching_tools: Tools that match job requirements
    - skill_gaps: Required skills not present in candidate profile
    - recommended_side_projects: Top 2 most relevant side projects with justification
    - project_selection_rationale: Why these projects were chosen
    - emphasis_areas: Which sections need the most adaptation
    - content_customization: Specific content recommendations for CV sections

html_generation:
  description: >
    Generate the final adapted CV in HTML format using the predefined HTML template while incorporating all strategic recommendations from the skills matching analysis. Populate the template with the candidate's information, emphasizing the prioritized skills and tools, featuring the 2 selected side projects prominently, and updating the location based on job requirements (job location or Malaga if remote). Ensure the output maintains professional formatting and creates a cohesive document tailored to the job opportunity.

    Follow these rules:
    - Do not truncate the information or change the order of the elements.
    - Do not add any additional information to the curriculum.
    - Ensure the HTML structure is valid and well-formed.
    - Maintain the original template's styling and visual appeal.
    - Include all required elements such as contact information, skills, projects, and experience.
    - Validate that the final HTML is properly formatted and ready for use.

    {html_template}
  expected_output: >
    Clean, properly formatted HTML content for the CV that adheres to the template structure.

pdf_generation:
  description: >
    Convert the HTML CV content to a professional PDF document. The HTML content will be provided to you as input from the previous task. 
    
    You must use the CVConverterHtmlToPdf tool to convert the HTML to PDF by calling:
    CVConverterHtmlToPdf function
    
    Use the last HTML content generated in the previous task as input.
  expected_output: >
    Confirmation that the PDF was successfully generated with the path to the file.